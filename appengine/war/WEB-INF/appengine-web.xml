<?xml version="1.0" encoding="utf-8"?>
<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
	<application>desarrollo-lia-2</application>
	<version>1</version>
	
	<!-- Allows App Engine to send multiple requests to one instance in parallel: -->
	<threadsafe>true</threadsafe>
	
	<!-- Using MySQL connector. -->
	<!-- <use-google-connector-j>true</use-google-connector-j> -->

	<!-- Configure java.util.logging -->
	<system-properties>
		<property name="java.util.logging.config.file" value="WEB-INF/logging.properties" />

		<!-- CLOUD DATABASE. To get the instance ID (desarrollo-lia:us-east1:brochureforce) 
			this command should be run in the Cloud SDK Shell: "gcloud sql instances 
			describe <instance-id>" The "connectionName" property value is the name to 
			set in the JDBC Uri of the cloud database: jdbc:google:mysql://<instance-id>/<database>?user=<user>&amp;password=<password> 
			In this case, the connectionName is "desarrollo-lia:us-east1:brochureforce" -->
		<property name="cloud.db.url"
			value="jdbc:google:mysql://desarrollo-lia-2:us-east1:csql-brochureforce/brochureforce" />
		<property name="cloud.db.driver"
			value="com.google.appengine.api.rdbms.AppEngineDriver" />
		<property name="cloud.db.user" value="webapp-brochureforce" />
		<property name="cloud.db.password"
			value="FW1IlAoBwSLD7Z7+RuPbgiIlLq1ajyXK1rt6qnO5uazvh0YvEdmtDWnijW8acs6L" />
		<property name="cloud.db.encryptionProvider"
			value="com.cloud.brochureforce.dataaccess.security.CloudEncryptionProvider" />

		<!-- LOCAL DATABASE -->
		<property name="dev.db.url" value="jdbc:mysql://localhost:3307/brochureforce" />
		<property name="dev.db.driver" value="com.mysql.jdbc.Driver" />
		<property name="dev.db.user" value="webapp-brochureforce" />
		<property name="dev.db.password"
			value="FW1IlAoBwSLD7Z7+RuPbgiIlLq1ajyXK1rt6qnO5uazvh0YvEdmtDWnijW8acs6L" />
		<property name="dev.db.encryptionProvider"
			value="com.cloud.brochureforce.dataaccess.security.DevEncryptionProvider" />

		<!-- *********************************************** -->
		<!-- DATANUCLEUS PROPERTIES -->
		<!-- *********************************************** -->
		<!-- THESE 2 ARE A MUST-HAVE!!! -->
		<!-- *********************************************** -->
		<property name="persistencemanager.storeManagerType" value="rdbms" />
		<property name="persistencemanager.identifier.case" value="LowerCase" />
		<!-- *********************************************** -->
		<property name="persistencemanager.NontransactionalRead"
			value="true" />
		<property name="persistencemanager.NontransactionalWrite"
			value="true" />
		<property name="persistencemanager.singletonEMFForName"
			value="true" />
		<property name="persistencemanager.query.timeout" value="5000" />
		<property name="persistencemanager.datastoreWriteTimeout"
			value="10000" />
		<!-- *********************************************** -->
	</system-properties>

	<!-- HTTP Sessions are disabled by default. Set this property value to true 
		to enable HTTP sessions. It's possible to reduce request latency by configuring 
		your application to asynchronously write HTTP session data to the datastore: 
		With this feature enabled, there is a very small chance your app will see 
		stale session data. For details, see https://cloud.google.com/appengine/docs/java/config/appconfig#Java_appengine_web_xml_Enabling_sessions -->
	<sessions-enabled>true</sessions-enabled>

	<!-- Experiments configuring App Engine to transfer session data from memcache 
		to the datastore asynchronously to reduce request latency using the <async-session-persistence> 
		parameter to true cause Task queue quotas to become exhausted. For the time 
		being it is recommended this property value be set to false. -->
	<async-session-persistence enabled="false" />

	<!-- xhtml files arenâ€™t static, so that we can define it as an url pattern 
		for the faces servlet. -->
	<static-files>
		<exclude path="/**.xhtml" />
	</static-files>
</appengine-web-app>
